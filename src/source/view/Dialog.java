package src.source.view;


import src.source.model.*;


import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JLabel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Eray
 */

public class Dialog extends javax.swing.JPanel {

    // GUI-related variables

    private JDialog confirmation;
    private JButton yesOption, noOption;
    private JLabel textualInfo;


    private String buyOrSell = null, name = null;

    private int tempSeedCnt, tempFoodCnt, purchasePrice, sellingPrice;



    private Map map = null; // reference to map

    private Inventory inv = null; // reference to inventory

    private ItemPanel itemPanel = null;


    // the same dialog box, except for the textual information field, is used
    // for both purchasing and selling confirmations

    // in other words, if the player decides to sell an item, the dialog box
    // will use the word "sell"

    // otherwise, when buying an item, the dialog box will use the word "buy"

    public Dialog(String buyOrSell, Map map, String name,
                  int tempSeedCnt, int tempFoodCnt, int purchasePrice, int sellingPrice,
                  ItemPanel itemPanel) {

        this.buyOrSell = buyOrSell;
        this.name = name;

        this.tempSeedCnt = tempSeedCnt;
        this.tempFoodCnt = tempFoodCnt;
        this.purchasePrice = purchasePrice;
        this.sellingPrice = sellingPrice;

        this.map = map;

        this.itemPanel = itemPanel;


        this.inv = map.getInventory();

        initComponents(buyOrSell);

    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents(String buyOrSell) {

        JFrame frame = new JFrame();

        confirmation = new JDialog();
        textualInfo = new JLabel();
        yesOption = new JButton();
        noOption = new JButton();

        confirmation.setMinimumSize(new java.awt.Dimension(350, 140));
        confirmation.setLocation(450, 450);

        textualInfo.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);



        if (buyOrSell.equals("buy"))
            textualInfo.setText("Are you sure you want to buy " + name + " seed?");
        else
            textualInfo.setText("Are you sure you want to sell the collected " + name + "?");


        yesOption.setText("Yes");

        yesOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                yesAction(evt);
            }
        });

        noOption.setText("No");
        noOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                noAction(evt);
            }
        });

        javax.swing.GroupLayout confirmationLayout = new javax.swing.GroupLayout(confirmation.getContentPane());
        confirmation.getContentPane().setLayout(confirmationLayout);
        confirmationLayout.setHorizontalGroup(
                confirmationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, confirmationLayout.createSequentialGroup()
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(yesOption)
                                .addGap(18, 18, 18)
                                .addComponent(noOption)
                                .addGap(101, 101, 101))
                        .addComponent(textualInfo, javax.swing.GroupLayout.DEFAULT_SIZE, 383, Short.MAX_VALUE)
        );
        confirmationLayout.setVerticalGroup(
                confirmationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(confirmationLayout.createSequentialGroup()
                                .addGap(30, 30, 30)
                                .addComponent(textualInfo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(confirmationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(yesOption)
                                        .addComponent(noOption))
                                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 300, Short.MAX_VALUE)
        );


        confirmation.setVisible(true);


    }// </editor-fold>

    private void yesAction(java.awt.event.ActionEvent evt) {

        // if the player confirmed to buy items

        int currentMoney = map.getFarmer().getFarmerMoney();

        if (buyOrSell.equals("buy")) {

            // add tempSeedCnt-many items to inventory
            inv.addPurchasedItems(name, tempSeedCnt, purchasePrice);

            // adjust farmer's money
            map.getFarmer().setFarmerMoney(currentMoney - purchasePrice * tempSeedCnt);

        }
        else { // if (buyOrSell.equals("sell")) {

            if (!(name.equals("GMC") || name.equals("Fertilizer"))) {

                // remove tempFoodCnt-many sold items from the inventory
                inv.removeSoldItems(name, tempFoodCnt, sellingPrice);

                // adjust farmer's money
                map.getFarmer().setFarmerMoney(currentMoney + sellingPrice * tempFoodCnt);

            }

        }

        allUpdates();

        confirmation.dispose();

    }

    private void allUpdates() {

        itemPanel.resetFoodCount();
        itemPanel.resetSeedCount();

        itemPanel.updateCountValues();

        itemPanel.updateComboboxes();

        itemPanel.storePanel.updateView();

        // itemPanel.scrollPane.updateUI();
        System.out.println("If a problem occurs, it might be here.");

    }

    private void noAction(java.awt.event.ActionEvent evt) {

        itemPanel.storePanel.updateView();

        // itemPanel.scrollPane.updateUI();
        System.out.println("If a problem occurs, it might be here.");

        itemPanel.resetFoodCount();
        itemPanel.resetSeedCount();

        confirmation.dispose();

    }
}